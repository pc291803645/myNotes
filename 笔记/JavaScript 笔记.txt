b <!-----10月31日------------------------------------------------------------------------------------>
检测方法：
1. alert()，在窗口弹出框，用于检测和检查。

	弊端：使用的范围，单个对象。只输出一个结果

	例如：var box=“123456”；
     	      alert（box）；

2. console.log()，用于查找错误和看对象的一些信息。输出一个集合

	区别：都是检测用的，alert 会弹出窗口，而且 单一。console.log 进网页按键F12 里面的console 查看。



获取元素：

document.getElementById("id值");

例如：

	<input type="button" id="btn"/>

	document.getElementById("btn").style.background="red";



f

赋值：
	从右往左。

变量： var
	
例如：var aaa =document.getElementById("id值")； “aaa”是自定义名称。变量名称不要一样。



事件：

	onclick  （点击事件）


例如：aaa.onclick = function(){
		
		alert("您好")；

		}



注意：在低版本IE，input的type是转换不了的。
      a链接，获取元素展现的是href地址。a标签作为按键时，href=“javascript：；”


window.onload,事件，作用：让整个页面都加载完后再执行.

例如：window.onload = function(){

	}

字符串：是一个数据类型，由0个或者多个字符组成。

	表现方式："" 跟 ''

字符串拼接通过  + ,字符串没有运算功能，只能拼接。

字符串加数字结果是一个字符串。


例如：var str = “字符串”
	var str1 = “另一个字符串”
	var str2 = 2；
	var str3 = 3；
	var box =""

	box=str+str1


++，自增 num = num+1;在自身的基础上加1；

--, 自减 num = num-1;在自身的基础上减1；



<!-----11月1日------------------------------------------------------------------------------------------------>

++或--，超出范略。

if，是js里用于判断的语句。

if（条件语句）{

    代码

}

if（条件语句）括号里的东西，会转变成一个布尔值。

布尔值：真（true），假（false）

在if判断语句里括号的结果会隐式转化成布尔值。

如果（）括号里面是纯数字，0代表的是false，其他的所有都是true

当（）括号里面是字符串，""空字符串代表false。其他都是true

（判断语句里面 = 要用 == 表示）

写法：
	1. if（）{ }括号里隐式转换的结果，是true就执行{ }的代码，如果是false，则不执行。

	2. if（）{ }else{ }

	3. if（条件语句）{ }else if（条件语气）{ }


拿if做判断的时候，不要用src作为判断的条件语气。

if判断时，不要用颜色来作为判断的依据或条件语气。

src href backgroundColor



innerHTML:
	
	读取：获取元素从开始标签，到结束标签之间的所有内容。内容包括标签。

例如：var try = box.innerHTML;

     console.log(tyr);(获取box的所有内容)（或者：var val = box.value; ）

	设置或者写：

例如：box.innerHTML = “这是新内容”；（会覆盖原来元素的内容）



变量名：
	1.大驼峰：
		myTextValue;
	2.小驼峰：
		MyText；




<!-----11月2日------------------------------------------------------------------------------------------------>

点击事件 改变class 时  正确写法是   className     ，，id 则不用加Name  。


数组：复合类型

写法：例如：

	var arr = [ ]；数组的一种写法。


	arr = [1,2,3, “字符串”，true，false];数据与数据之间用逗号隔开。里面可以是数字，字符串，布尔值,数组。


	New Array();或者var arr = New Array(); 数组的另一种写法。

length：长度；

写法：数组名.length获取的是数据有多少个。

数组的下标，自动分配好的，从0开始到结束，最后一个数据的下标是 arr.length-1 。
 
	例如：var arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]

		var box = arr.length;

		alert(box);



获取数组里面的数据，是通过数组的下标获取。

例如：arr[下标]；

通过下标获取数组里的数据，也可以通过下标改变数组里面的数据。


例如：arr[Number] = "ddd";

+=就是在自身的基础上增加。


通过标签获取元素：

document.getElementsByTagName('标签名')；

ps：获取的值是一个集合（内数组），有长度length，也有下标。

获取某一个特定的元素通过下标获取。


通过类名获取元素（集合）：

document.getElementsByClassName('');



for - 遍历-循环。

for(变量初始化；判断条件；执行){ 

	变化的值

}


例如：

for(var i=0;i<10;i++){

	console.log(i);

}

第一步：执行变量的初始值，i=0。

第二步：判断条件是否成立,如果是true，执行第三步，如果是false，则结束。

第三步：执行{｝里的代码；

第四步：自增或者自减；



在页面里面写入： document.write（）；





<!-----11月３日------------------------------------------------------------------------------------------------>


input 里面写 checked"" 复选框是勾选状态；（js 里面表示：    checked = true；）不勾选则是checked = false；


break:跳出整个循环,只能用在循环里面

continue：跳过本次循环，只能用在循环里面

例如：if（i =7）break；
      if(i =7)continue;


函数：

	函数只是js里面的一段程序或一个代码块。
	
	函数本身是没有执行功能的。

	必须通过调用才能执行。（函数可以复用）


function 函数名（）{ }

调用：  函数名（）

例如：function fn （）{　　alert(1);　｝

调用该函数： fn（）；



this：关键字。

1.在事件里面，this代表就是事件前面的那一个元素（对象）。

2.在纯粹的的函数调用里面，this代表的就是window。


<!-----11月7日------------------------------------------------------------------------------------------------>

自定义属性：（自定义属性也叫索引）

例如：
	btn[i].zdy = i;

自己定义一个私有属性

自定义只能加载给对象（标签、数组）

//索引自定义属性也叫索引
//alert(this.zdy)
//this.zdy只是一个数字；
//一个物体与另一个物体需要一一对应时，就可以设置自定义属性；


<!-----11月8日------------------------------------------------------------------------------------------------>

javascript的组成部分：

	1.ECMAScript（标准）：组成javascript语言的数据类型和语法。（比如：规定好的各种语法）

		var this if（）{ }而不是if[]{ }

	2.DOM:文档对象模型

	3.BOM：浏览器对象模型，



数据类型：

	因为数据类型的不同，在运算里面，结果也不一样。

	+ 作用两边任意一个是字符串，那+就是字符串的拼接;

	+ 两边都是数字的时候，就是数学运算里面的 + ;

	1. 字符串（String）：是由0多个或者多个字符串组成的串；单引号对或者双引号对；

	2. 布尔值（Boolean）： true 或 false ；

	3. 数字（Number）:有整数和浮点小数。

		-Infinity    到  Infinity  取值范围  (负无穷到正无穷)

	4.未定义（Undefined）：有变量名而没有值，浏览器会解析出没有定义,例如：var btn；

	5.空（null）：在没有获取元素或者是报错的情况下出现 null

以上5种是基本的数据类型，也称为简单数据类型；

	6.复合类型（Object）（复杂类型）：也叫作 对象

		数组[　];对象{　｝

写法：例如：

	　var Obj = {

		"name":"pl",

		"age":18,

		"like":"呵呵"
	}

获取值： var box = Obj.name;  //通过点. 获取属性

	 var  box = Obj["name"];  //[ ],但是里面的值必须加引号，标准双引号。

(不是通过下标获取，而是通过属性获取；)


typeof：

	检查右边的数据是什么类型

例如：var str = "1":

	console.log(typeof:str);返回值是string  ；数据类型首字符是大写的 String；返回值都是字符串。


 
ECMAScript： 字符串  数字  布尔值  null  未定义      对象  

          （一一对应）

Typeof:     字符串  数字  布尔值  对象   undefined   对象  function


在页面获取的所有数据都是“字符串”类型。


数据类型的转换：

	1.把字符串转换成数字
		Number（）；把 纯 的数字字符串 转换成 数字 ；只要数据里面存在一个不是数字的东西，转换出来的结果都是NaN

		NaN:不是数字的数字；（代表不存在的数字）

		parseInt（）：把长得像数字的字符串转换成数字，

				1.开头不是长得像字符串的数字，转化结果都是NaN;(不是数字开头)

				2.开头是数字，一直转换到不是数字为止；

				3.开头是数字，而且后面都是数字，到小数点结束；



	2.Number转换布尔值时

		true转换成1

		false转换成0

	3.Number转换null（空）：会把null转换成0

	4.Number装换underfine：（未定义）：转换成NaN

	5.Number转换对象：
		
		1.空数组，转化换成0，其他都是NaN

		

Boolean转换Number：

	1.0只能转换成false

	2.非0数字转换成true

Boolean转换字符串：

	1.空字符串转换为false

	2.非空字符串都为true

Boolean转换null（空）：

	转换成false

Boolean转换underfine（未定义）：

	转换成false

Boolean转换对象：

	转换成true



parseFloat（）：转换浮点数（小数 ）。

	1.有纯数字组成的字符串，包括小数，整数都转换成数字

	2.开头是数字，一直到不是数字结束；

	3.不是数字开头，直接转换成NaN


例如：

<script type="text/javascript">
			var num = 12.5;
			
			if(parseInt(num) == parseFloat(num)){
				
				alert('我是整数');
			}else{
				alert('我不是整数');
			}
			
			
</script>

类型转换：

	强制类型转换：就是通过函数或者方法调用，直接把一个类型强制转换成其他类型。

			例如：Boolear（），Number(),parseInt(),parseFloat

	隐式转换：悄悄的转换，系统给我们转换的。

		1.if（）判断会把括号里面的结果隐式的转换成布尔值

		2.+，左右两边任意有一个字符串，+把左右隐式转换成字符串

		  +，左右两边都是数字，隐式转换成数字

		3.-，会把左右两边的字符串数字隐式转换成数字。（如果有一边不是字符串数字，结果是NaN）;

		4.++，会把字符串数字隐式转换成数字

		5，--，会把字符串数字隐式转换成数字


运算：

	+ ，- ，* ，/ ,%(取余数，取模)例如：var box = a%b；(数学运算)

3种情况：

1.a>b 余数

2.a=b 0

3.a<b a


Math.floor()向下取整

transform: scale(.5);在 hover 里面设置总体大小的变化



<!-----11月9日------------------------------------------------------------------------------------------------>

2.赋值运算：

	= ：把右边的值给左边

	+=：在自身的基础上加一个数
	
	-=：在自身的基础上减一个数

	*=：在自身的基础上乘一个数

	/=:在自身的基础上除一个数


3.关系运算符

	>  <  ==  >=  <=  !=  ===     (会把运算结果隐式转换成布尔值输出来)


	==：只比较数值，不管类型。

	===：性能更高，不仅比较数值，还要比较类型

4.逻辑运算符    （在逻辑运算里面，如果转化的是数字，直接返回这个数字）

	与 或 非
	
	与：&&；（判断左右两边，左边成立，才看右边，右边如果成立，转化结果成true，右边如果不成立，转换为false。如果左边不成立，直接就不成立）

	或：||；（比较随便，只要有一边成立，转换为true，如果左边成立不看右边，如果左边不成立看右边）

	非：！；（先把内容转换为布尔值，然后再取相反的布尔值）


一元运算：只有一边有值的运算符，叫做一元运算符

	例如：typeof "111"

二元运算符：两边都有值的运算符，叫做二元运算符。

	例如：++ -- + -

三元运算符：相当于if（）{}else{}；

	判断条件？true：false；

	例如：
		var str = "三元"

		（str == "三元"）？aler（1）：aler（2）；







<!-----11月10日------------------------------------------------------------------------------------------------>	


NaN:不是数字的数。Not a Number

	进行非法运算时，结果都是NaN。

	NaN不等于自己(NaN)，

isNaN();判断是否是NaN；
	
	 喜欢NaN,如果是NaN，结果为true；
	 讨厌数字，如果是数字，结果为false； 

	



switch：判断语句


例如：
	var str = "css";（变量写在外边）

	switch(str){

		case "css":

		alert("css")；

		break；

		case "js":

		alert("js")

		break；

		default：
		
		alert（“都没有”）；

}


循环

	1.for（）；循环；

	2.while（）；循环；写法：while（判断条件）{　｝


例如：

	var i =0；

	while(i<5){

		alert(i);

		if(i == 2){

		break；

		}

		i++;
	
	
	}


break 一般用于for循环，while循环；

switch必须加break；


区别：
	1.变量写在外面；
	2.可以不用写自增自减条件
	3.括号里面只有判断条件



函数：一个js程序或者代码块；

	1.函数声明
	
		function fn（）{
			alert（1）；
			
			}


		调用：fn()；

	2.函数表达式
		var a = function fn（）{
			alert（1）；
			
			}

		调用：a()；


	两种写法区别：函数声明在任意地方调用，函数表达式，只能放在表达式下边。


传参：

	function fn（参数）{


		}


形参：就是在函数名后面的括号里放的数，相当于一个变量，

	这个变量只能在这个函数里面用。参数名随便取。

	参数可以有多个，每个参数以逗号隔开。

例如；		function  fn（a,b,c,d）{    //相当于把变量写在括号里面（形参）
		
			alert(a);

			}

			fn(1,2,3,4);   //实参里面放的是真实的值（实参）

实参：实实在在的参数，在函数调用后的括号里面写的参数。可以放“” null obj [ ] function(){};

形参和实参一一对应。



<!-----11月11日------------------------------------------------------------------------------------------------>	


   .  跟 [ ]都是‘的’的意思。但是  .  后面不能跟变量；

[ ] 也相当于‘的’的意思，可以装变量；


arguments：是一个类数组，是实参的集合。

	  只能在函数里面使用，和实参一一对应。

	  是有length长度的。

	  可以在argument里面通过下标获取特定的值。

例如：
	function fn(){
	
	  console.log(argument[4]);
  	  console.log(argument.length);

	}	

	fn(1,2,3,4,5,6,7,8,9);



return:  return后面的值就是函数执行后返回的值。

	只能在函数里面用，

	所有的函数没有自己写返回值，那么这个函数的返回值就是underfine；（默认返回值）

	return会阻止，它后面的代码，让他们不再执行




<!--------------------11月12日------------------------------------------------------------------------------------------------>	


a++；      后自增，先赋值给变量，然后自身再++；

++a；      前自增，先自身++，加完以后再赋给变量；



onmouseover:鼠标移入，触发事件。

onmouseout  :鼠标移出，触发事件。

特点：父级块设置这两个事件时，父级内的标签也会具有这些事件属性。


<!-----11月15日------------------------------------------------------------------------------------------------>	

	//通过style获取样式，只能获取行间样式。


getComputedStyle： 

	获取元素表现出来的样式。 

用法：

	getComputedStyle（element/元素）；

例如：var getcss = getComputedStyle（box）；返回值是一个对象；所有的属性。

	var d =getComputedStyle(box)["height"]; //获取其中一个属性的样式；
		
	var d =getComputedStyle(box).height; //获取其中一个属性的样式；



	var b =box.style.height;  //通过style获取样式，只能获取行间样式。


特点：

	1.获取到的颜色是rgb值；

	2.不能获取复合样式；



currentStyle:

		IE 浏览器(专属)获取元素表现出来的样式；

用法：

	例如：var arrts = box.currentStyle; 返回值是一个对象；

	     var arrts = box.currentStyle["height"];



预解析机制：就是浏览器在解析js代码时候要先做什么；

	1.找到拥有关键字的东西，var function；

	2.最先调整var，把var和变量名调到script的最前面，这个变量的值是没有提的；

	3.var 调整完之后，function（），他是把整个函数都拎上去；

	4.把var 和function都调整完之后，从上往下，一步一步的执行。


<!-----11月16日------------------------------------------------------------------------------------------------>	

作用域：
	js代码起作用的范围。（一条数据在哪个范围里面可以执行）

	1.作用域通过函数来划分。
 	2.提升程序局部逻辑性。

全局变量：
	1.就是写在最外边的或者没有被函数包裹的。var function （）{ }

	2.如果变量前面没有var，浏览器会默认的把他挂在window，变成全局变量。

		window对象：

	3.window.a =12;直接挂在window下。

		特点：1.在任何地方都可以改变或者修改变量值。（全局变量是整个代码中都可以调用的变量）没有被函数包裹的变量；


局部变量：
	写在函数里面的变量或者函数；

	只能在该函数里面使用。

	局部变量互不影响，减少了命名的冲突；



作用域链：一个函数，就形成一个作用域，在该作用域里面所有的数据的一个集合，就叫做作用域链。

特点：从子级到父级一层层的找，找到就结束。父级不能访问子级的变量。（从里往外）

	子级可以使用父级的变量，父级不能使用子级的变量。

	当子级的作用域里没有使用的变量，就会去找父级，如果有就使用这个变量，

	没有就继续往外找，直到找到为止，如果外围都没有，（全局变量）就报错。


onchange:事件；
	当value值发生改变触发事件；




<!-----11月17日------------------------------------------------------------------------------------------------>	


function(){ }     //匿名函数；没有名字的函数。

function fn(){ }   //有名字的函数叫 有名函数。


匿名函数的执行：

	1.自执行
	
		例如：（function(){ } ）（）

		例如：

			（function（a,b,c）{
				alert(a+b+c);

			}）(1,2,3,)       //相当于fn（1,2,3）



闭包： 必须在函数里面，函数包函数就是闭包；   //子级可以访问父级函数的变量和参数；
					
	1.把父级或者祖先级的变量保留。     //子函数把父级烦人变量或者参数留下，以后继续使用；

					//坏处：没有被垃圾回收机构回收，导致内存泄露；


定时器：延时定时器 和 间隔定时器	


	1.延时定时器：setTimeout
			延迟多久才执行	

		用法：	setTimeout(function(){  },延迟时间）；时间单位是毫秒ms	

		例如：	setTimeout(
				function(){
				  alert(1);
				}
				,2000    //单位是毫秒 ms；
			  )				


	2.间隔定时器：setInterval(function(){  },时间）；时间单位是毫秒ms   //间隔多长时间重新执行一次



<!-----11月18日------------------------------------------------------------------------------------------------>	

clearInterval（定时器的变量值）:关闭定时器；

例如：

	var timer = 0；

	timer=setInterval(function(){  },间隔时间）；

	btn.onclick = function(){

		clearInterval(timer);

	}


1. Math.ceil()用作向上取整。
2. Math.floor()用作向下取整。
3. Math.round() 我们数学中常用到的四舍五入取整。	

<!-----11月23日------------------------------------------------------------------------------------------------>	

this关键字

1.在纯粹的函数调用里面，this代表window；

2.在事件里面，this代表 对象；

3.定时器里面，this代表window；（若要获取对象，加个变量）；

<!-----11月24日------------------------------------------------------------------------------------------------>	

时间对象：new Date();

[ ]    new Array();

内置对象；电脑自带；

获取的是的本机时间；

getFullYear() ； :获取年； 数据类型是：unmber类型；

getMonth（）；   ：获取月；从0开始的；老外规定；中国习惯+1；unmber类型；

getDate（）；	 ：日，获取号数; 从1开始；1-31；unmber类型；

getDay();        ：获取星期数 0-6；unmber类型；

getHours（）；	 ：获取小时；

getMinutes（）；  ：获取分钟；6

getSeconds（）；  ：获取秒数；

getMilliseconds（）；毫秒；

getTime（）；     获取的是  代表现在到 1970.01.01 00:00:00  的时间（ms毫秒）；时间戳

例如：
	var date = new Date();

	var year = date.getFullYear() ；

	var month = date.getMonth（）；

	var shijian = date.getDate（）；

	var day = date.getDay（）；

	console.log（date，year，shijian，day）；



toLocaleString();

	例如： new Date().toLocaleString();      //返回结果：2010-2-2 12:00:00；

	       new Date().toLocaleDateString();  //返还结果：2010-2-2;

	       new Date().toLocaleTimeString();  //返还结果：12:00:00;

		
	


<!-----11月25日------------------------------------------------------------------------------------------------>	

var date = new Date(2017,2,20,10,30,4);   //在括号里面可以设置固定时间。年，月，日，时，分，秒

设置时间：在时间对象里面；

年：setFullYear（）；获取的是从设置时间到1970.01.01 00：00:00 的时间戳；

例如：
var year = date.setFullYear(2019)
var year = date.setMonth(10)


//charAt(i)  //获取一串字符串里的某个字符,i是位置，从0开始
var sele = "fjoisjgi".charAt(7);

<!-----11月28日------------------------------------------------------------------------------------------------>	

字符串：有length值；只能获取，不能设置；

charAt（）：
	作用；获取字符串制指定位置的字符；

	用法：string.charAt（index）；

	返回值，字符串里指定位置的字符；（如果字符串是汉字的话，返回一个string）

	参数：

		数字，当小于0或者大于等于length，返回一个空。


charCodeAt（）：

	返回值，是一个Unicode值;

例如：	var h = "aaa"
 
	var s = h.charCodeAt（）;	

	参数：
	     如果不是数字，默认为0；
	     如果是浮点小数，直接取小数点前面的整数；

	字符串比较只比较第一个字符，而且是先转换成Unicode值再进行转换。

String.fromCharCode();   //参数放的是Unicode  值；

	把Unicode值翻译成对应的值；


indexof：
	作用：用于查找字符串里指定字符在字符串里的位置；（首次出现的位置）

	返回值：返回这个字符在字符串的位置，位置从0开始；如果没有找到就返回-1；

	用法：

		str.indexof（“林”，index）；

	参数：

	第一个参数就是要查找的字符，如果只有一个参数，第二个参数默认为0；

	第二个参数，就是从哪个参数开始找；



lastIndexof:
	找到字符串最后一次出现的字符的位置；位置从0开始；  //指定字符往前推，找第一个；
	返回值：返回字符的位置； 


substring: 截取字符串中某一段字符；

	用法：string.substring(starindex,endindex)

	参数：
		第一个参数，开始截取的位置，包括这个位置；

		第二个参数，截取结束的位置，不包括这个位置；

		当只有一个参数时，从开始（starindex）位置到结束；
		
		自动判断大小，然后自动调节参数位置；

		当参数小于0时，默认为0


slice：与substring的区别就是，当参数为小于0的时候，会从字符串的后面方向开始截；（从后往前）

	
		第一个参数，开始截取的位置，包括这个位置；

		第二个参数，截取结束的位置，不包括这个位置；

		当只有一个参数时，从开始（starindex）位置到结束；

		当只有一个参数且为负数时，负为方向，从右往左截取，截取startind；

	        当有两个参数，且有负数，直接返回空；



substr（）；
	用法：str.substr（index，lenth）；//开始位置，长度；

	第一个参数，截取的位置；

	第二个参数，截取的长度；

	只有一个参数的时候，从index截取到结束；



split（）；把字符串拆分成数组；

	按照传进去的参数拆分成数组；

	当参数是两个的时候，第二个是代表长度，当拆到长度时，则停止拆分。
	




//    push（）；在数组后面添加数据；例如： arr.push(2);




<!-----11月29日------------------------------------------------------------------------------------------------>	

toLowerCase();
	把字符串大写变成小写；

toUpperCase();
	把字符串小写变成大写；
trim（）；
	把字符串首尾的空格去掉；


对象 [ ]数组,{ }对象,

	数据与数据之间以逗号隔开；

	对象属性必须要引号，双引号。

	对象数据是放在属性里面的；

var arr = [];
var arr = { };  //key:value;   key属性 ：value属性值；

例如：　var Obj = {

		"name":"pl",

		"age":18,

		"like":"呵呵"
	}

获取值： var box = Obj.name;  //通过点. 获取属性

	 var  box = Obj["name"];  //[ ],但是里面的值必须加引号，标准双引号。


json：实质就是字符串；格式像对象的字符串；

以"{ }"或者"[ ]"开头和结尾的叫做json；

把json转换成对象：
	JSON.parse（）；
	
	参数，就是要转换的参数；

把对象转换为json：
	JSON.stringify();


in  用来判断对象里是否有这个属性；

例如：console.log("height" in obj);  判断obj 对象里是否有“height” 属性；

for in  循环的是对象；

例如：
	for（var attr in obj）{

	    console.log（obj[attr]）;

}