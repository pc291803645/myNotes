<-----------------------------------------------11月-30日-------------------------------------------------------------------->


内置对象：
	Math.floor();向下取整；number类型；

	Math.ceil（）；向上取整；

	Math.round();四舍五入；把小数的第一位四舍五入。

	Math.random();随机小数，取0~1之间的小数，取不到1。

	Math.pow();求数的几次方； // var a = Math.pow(3,2);  //3的2次方；

	Math.sqrt();求开方；  //var a = Math.sqrt(16); //16的开方等于4；

（0--x）：Math.ceil（Math.random()*x-1）;

(0--x]:Math.ceil（Math.random()*x）;

[0--x):Math.floor（Math.random()*x）;

[0--x]:Math.floor（Math.random()*(x+1)）;


	Math.abs();取绝对值；

	Math.cos();取余弦；参数是度数；

		参数：deg*Math.PI/180

	Math.sin();取正弦；

	Math.tan();取正切；

	例如：
		var f = Math.cos(45*Math.PI/180);  //45 代表是45°；
		var f = Math.sin(45*Math.PI/180); 
		var f = Math.tan(45*Math.PI/180); 


	Math.min();比较两个字，把小的数返回来；只能两个两个比较；

	Math.max();比较两个字，把大的数返回来；只能两个两个比较；


toFixed（）；

	number.toFixed(n);

	n:保留的多少位小数，剩下的数四舍五入；结果是个字符串；


	例如：var nub = 12.334564345063

	var n = nub.tOFixed(3);

	console.log(n);
	
	结果是12.335；


push（）；在数组的尾部添加数据；数据可以是多个，每个数据用逗号隔开；

	用法：arr.push(添加的数据)；

	返回值是新数组的长度；

pop（）；删除数组最后一个数据，只能删一个。

	arr.pop();

	返回值是被删除的数据；

unshift（）；在数组的最前面添加数据；数据可以是多个，每个数据用逗号隔开；

	用法：arr.unshift(添加色数据)；

	返回值是新数组的长度；


shift（）；删除数组最前的一个数据，只能删一个。

	arr.shift();

	返回值是被删除的数据；


offset；

	例如：var b = span[0].offsetLeft;  //获取的是该元素“span[0]”到它父级左边的距离。



<-----------------------------------------------12月-01日-------------------------------------------------------------------->


join();数组变成字符串；

	var box = arr.join();

	参数：如果没有写参数，默认数组一逗号拼接起来；

      	如果有参数，按这个参数依次把数组拼接起来；


concat（）；把一个数组加到数组里面；

	用法：把要添加的数组放在参数里面；添加到哪个数组，哪个数组就放在前面；
 
	var box = arr.concat(arr1);   //在数组arr后面加上arr1数组；

	返回值：是添加完后的新数组；

清除一个数组的数剧最快的方法就是直接让数组的length为0；

	例如：arr.legnth = 0;


reverse();颠倒数组的顺序；

	var box = arr.reverse();

	返回值是颠倒后的新数组；

slice（）；截取数组；

	参数：第一个参数表示截取的开始位置；如果只有一个参数，从截取位置一直到最后；

	      第二个参数代表位置，取不到第二个位置；

	

	返回值：返回的是截取的数组；

splice（）；截取数组；

	参数：第一个参数代表位置，只有一个参数时，截取的是才开始截取的位置一直到结束；

	      第二个参数代表的是截取的长度；

	      第三个参数以后的所有参数都替换；

	作用：原来的数组，变成了截取完剩下的数组；
	插入：第二个参数为0，把参数插入进去；

	返回值：就是截取的这个数组；

sort（）；数组排序；

	没有参数的时候，用Unicode的序号比较；谁大谁排在后面；

	有参数，只能是函数；返回值是负数位置不变，正数位置颠倒；


	例如：var arr1 = arr.sort（function(a,b){return a-b});  //按照数字比较，a-b是从小到大，b-a是从大到小；

								//如果返回值是正数，比较的两个数就要颠倒位置；

								//如果返回值是负数，两个位置不变；



<-----------------------------------------------12月-05日-------------------------------------------------------------------->

递归：
	函数自己调用自己；条件不对，陷入死循环；(只是改变变量或者参数，效果不一样，需要来回循环时，使用；)







<-----------------------------------------------12月-08日-------------------------------------------------------------------->

DOM:  Document              Object                   Model

     文档，整个页面	   对象，指的就是元素(标签)   	    模型，元素与元素之间的关系；

dom：是操作页面，删除，添加，查找，改变 的标准；“添删改查”

document:是一个提供给开发者使用来操作页面的接口（API）；

页面的划分：
	1.按层级划分；

		父子级关系：同一层的元素；上下级之间的关系；

		兄弟级关系：拥有同一个父级。

		祖孙级关系：从当前往上找，找他的祖先；

		孙子级关系：从它当前往下找，找他的孙子；

	2.按类型划分；
		元素节点（标签）：	1		//用数字代表类型；
		
		属性节点：		2

		文本节点：		3

		注释节点：		8

		文档节点（document）：	9

	   nodeType：查看节点的类型；

		用法：例如：var a = div.nodeType；返回值是代表该元素节点类型的阿拉伯数字代表；

	   childNodes：
		获取某元素下的所有子节点的集合；

	   attributes：
		获取某元素下的所有属性的集合；

	   nodeValue：
		获取节点的值；

	   nodeName：
		获取节点的名称；



children：
	获取某元素下的所有子元素（集合）；

	var lis = ul.children;

parentNode:
	获取某元素的父元素或父节点；

nextElementSibling:
	获取某元素的下一个兄弟节点或元素；

previousElementSibling:
	获取某元素下的上一个兄弟节点或者元素；

firstElementChild;
	获取父级下面的第一个子级元素；

lastElementChild;
	获取父级下面的最后一个子级元素；
		



<-----------------------------------------------12月-09日-------------------------------------------------------------------->


offsetParent:
	找到某元素的定位父级；

	条件：1.子级有定位；父级也要有定位；找到的是距离子级最近的父级；“最近原则”
		
	      2.如果没有定位父级，body就是定位父级；

getAttribute（"attr"）；
	获取元素的属性值；   // .id  ["id"]  目前三种获取属性方法；

	用法： var a = div4.getAttribute（"class"）;

setAttribute("attr","属性值");
	设置元素的属性和属性值；生成的属性和值在浏览器中可以看见； //通过setAttribute();设置的属性只能用getAttribute（）；获取到；
	例如：	div4.setAttribute("class",11)
	
removeAttribute("attr");
	删除某元素里面的属性；
	例如：	div4.removeAttribute("id");
	




<-----------------------------------------------12月-10日-------------------------------------------------------------------->

offsetLeft:
	找到离定位父级，从元素的外边距到定位父级的内边距的距离；获取的值只是一个数字，没有单位；

offsetTop：
	找到离定位父级，从元素的外边距到定位父级的内边距的高度距离；获取的值只是一个数字，没有单位；

offsetWidth： 
	获取元素可视区的宽度； border + width + padding

offsetHeight： 
	获取元素可视区的高度； border + height + padding

clientWidth：
	获取元素可视区的宽度； width + padding


clientHeight：
	获取元素可视区的高度；  height + padding

getBoundingClientRect();获取可视区的信息；返回的是一个对象{top,left,right,width,height，bottom}




<-----------------------------------------------12月-12日-------------------------------------------------------------------->

document.createElement(字符串的标签名);  创建元素；
	参数：标签名；   //例如：（"input"）（"p"）（"a"）（"ul"）等；
	
	创建元素只能挂在document下；

appendChild： 在元素里面添加一个子元素；子元素的位置放在最后；当父级刚开始没有子元素的时候，则直接放进去；

	用法：父级.appendChild（创建好的元素）；//元素可以是创建的，也可以是页面获取的

	例如：p.appendChild(a) ;

insertBefore：在某元素的前面添加一个元素；  //insertAfter();

	如果要插入的元素前面没有元素，默认把元素插在最后；

	用法：父级.insertBefore(元素（可以是创建的也可以是页面获取的），被插入的元素)；
	
	例如：ul.insertBefore(li,list[0]); // 在list[0] 前面插入一个li；

	或者：span.insertBefore(p);  //在p 前面添加  span；(jquery写法)



removeChild();删除元素；

	用法：父级.removeChild(要删除的元素);

cloneNode（）：克隆（复制）元素；
   
	用法： var sss = div.cloneNode(Boonlean)；  //复制div       (括号默认为false)

						    true：所有东西全部复制下来；包括标签和文本

						    false：复制元素，其他什么都没有；

						    不能够复制事件；



replacChild（1,2）；剪切；

	参数：1.剪切的对象；
	      2.替换的对象；

	剪切把事件一起剪切；

	用法：body.replacChild(div[0],div[1]);


<-----------------------------------------------12月-13日-------------------------------------------------------------------->

tHead:
	获取表格的头部；
	例如：var head = table.tHead;

tFoot:
	获取表格的尾部；
	例如：var foot = table.tFoot;

	
tBodies:
	获取身体的身体部分；  //是一个集合；通过下标来获取某一个；

rows：
	获取表格的行的集合；

cells：
	获取某行下面的所有单元格；也是一个集合；


oninput：
	输入性控件的value值改变，触发事件；  //inout;textarea;select;

onchange：
	value值改变就触发事件；





<-----------------------------------------------12月-14日-------------------------------------------------------------------->

移动端获取元素的方法：（在pc端也可以用）

querySelector(#id/.class/p):获取元素；只找一个，最前面的那一个；
	
	
	用法：例如：var ul = document.querySelector("#ul");

	           var li = document.querySelector(".list");



querySelectorAll(#id/.class/p);获取所有元素，是一个集合；


onmouseenter：
	鼠标移入触发事件，在范围内只触发一次；

onmouseleave：
	鼠标移出触发事件，在范围内只触发一次；

onblur：
	失去光标（焦点）触发事件；
onfocus：
	获取光标（焦点）触发事件；






<-----------------------------------------------12月-15日-------------------------------------------------------------------->


BOM:浏览器对象模型；

Broeser          	Object                 Model


	方便操作一些以及开发出了的操作

	BOM：完全不兼容，没有标准，每个标准都是浏览器开发商自己规定的；

	学习的是浏览器开发出来的一些属性，方法，事件；

	BOM的核心：window；

open（）；创建一个新的页面/窗口；

	例如：window.open();   //谷歌 ，火狐浏览器直接拦截；IE可以允许打开；

	1.直接创建新窗口，谷歌 ，火狐浏览器直接拦截；IE可以允许打开；

	2.人为的触发事件生成窗口；不会被拦截；

参数：
	1.url：地址；      //window.open("https://www.baidu.com"，"_self","width=200px,height=200px，resizable=yes");

	2.窗口打开位置；  //_self在本窗口打开；_blank在新窗口打开（默认）；

	3.设置新窗口的大小,要设置宽高，第二个参数必须是"_blank";resizable = yes/no 浏览器是否可以拉动，该属性仅限IE浏览器；

			//"width=200px,height=200px，resizable=yes";

	
返回值：新建页面的window；



close：关闭窗口； //window.close();

	Chrome（谷歌）：直接关闭；
	
	火狐浏览器：没有反应；

	IE浏览器：会提示是否关闭；

	兼容的方法：用window.open（）新建窗口；再用close关闭；都兼容；

navigator.userAgent；用户代理信息；操作系统，浏览器版本，浏览器信息等  //var a = window.navigator.userAgent;


location：地址栏信息；是一个对象； //var a = window.location.href;
	
	href:获取的是一个字符串的地址 url；  可以设置也可以获取；

	search：获取地址后面的数据，？后边的值；(?到#的内容)

		设置，只要search设置有值，就会刷新一次页面；不管是什么值；（没有锚信息的时候才会刷新）

		例如：window.location.search = "111";   //地址栏显示：127.0.0.0ww.baidu.com?111

	hash：锚信息；获取值是在search后面，#后面的，#+设置的值；//限制刷新；



<-----------------------------------------------12月-19日-------------------------------------------------------------------->


onhashchange: //window.onhashchange:锚信息改变触发事件；

innerWidth；获取可视区的宽度（包含滚动条的宽度）；  //window.innerWidth

inenrHeight；获取可视区的高度（包含滚动条的高度）；

pageYOffset；获取滚动条的高度（距离顶端）； //window.pageYOffset;只能获取不能设置；

pageXOffset；获取滚动条到左边的距离；  //都是没有单位的；

scrollTo（x,y）；设置滚动条的位置；//window.scrollTo(20,20),



onscroll;滚动条滚动触发事件；滚动条的位置发生改变触发事件；  //window.onscroll;

onresize;可视区的大小发生改变触发事件；				//window.onresize;

<-----------------------------------------------12月-20日-------------------------------------------------------------------->



事件复合写法：
	window.onload = window.onresize = window.onscroll = function(){

	var width = document.documentElement.clientWidth;

}


事件绑定：
	每一个元素都拥有所有事件；只是事件的值null；

	人为的添加事件才会触发这些事件；

	所有的行为都是在浏览器的监视下的；只有触发某些事件，哪些事件代码才会执行；

事件绑定分为两种：

	1.传统的事件绑定；//on+事件名称；元素只能够拥有一个相同的名称的事件；如果有多个，后面的会把前面的覆盖；
	
		解决方案:
			用一个变量储存起来，在覆盖的事件里面调用；

	2.现代事件绑定;

		addEventListener():事件绑定函数；  //IE不支持；

		obj.addEventLisetner(传参);

			参数3个：
				（1）：事件名称，不带on的事件，是个字符串；
 	
				（2）：函数，执行的代码放在函数里面；
				
				（3）：是否捕获，值两个，true或者是false；不写默认false；

					false：代表冒泡；
					true：代表捕获；

			例如：document.addEventListener("click"，function（）{ alert（1） }，false)；
 
		     	document.addEventListener("click"，function（）{ alert（2） }，false)；
		


		attachEvent：专属IE的事件绑定函数；

			obj.attachEvent(参数)

				参数2个：

					（1）带on的事件 例如onclick，也是字符串；

					（2）函数；执行代码的函数；

			



this：是一个关键字。

	this的指向：
		1.在事件中，this指向或者代表这个对象。

		2.纯粹的函数调用里面，指向就是windo，或者代表就是window；

		3.在定时器里面，this指向window；



	改变this的指向：
		1.call（）；//fn.call(参数)；

			fn代表要改变this的函数；

			第一个参数代表fn里面的this指向的是谁，那这个参数就是谁；

			第二个参数到以后，都是实参；1,2,3，  //fn.call(obj,1,2,3,)

		2.apply();//fn.apply(参数)；

			第一个参数代表fn里面的this指向的是谁，那这个参数就是谁；

			第二个参数到以后，是一个数组，数组里面装的是实参  //fn.apply(obj,[1,2,3])

		3.new；


focus();自动获取焦点； // input.focus();

selset();选中状态； //
			
	



<-----------------------------------------------12月-21日-------------------------------------------------------------------->

解除事件绑定：

	removeEventListener（）；

		obj.removeEventListener(参数);

		参数3个：

			（1）：不带on的事件
			（2）：函数	
			（3）：是否捕获；true/fasle


IE专属解除事件绑定：
	
	detachEvent（）；//obj.detachEvent(参数);

		2个参数；


传统事件解绑可以直接写：
		div.onmousemove = unll;


鼠标事件：

	onmousedown ：鼠标按键按下触发事件；		//window.onmousedown = function(){}

	onmouseup： 鼠标按键按下，抬起触发事件；

	onmousemove ：鼠标移动触发事件；			//div.onnousemove = function(){}

	dblclick:鼠标双击事件；

键盘事件：
	
	onkeydown： 键盘上的任何键位，只要按下，触发事件；	//window.onkeydown = function(){}


	onkeyup： 键位按下，放开触发事件；


捕获：
	目标元素的事件绑定函数触发以后，要找到目标元素，window>document>body>div;

	一层一层的往下找，直到找到目标元素；这个过程就叫做捕获；

冒泡：
	从目标元素开始，一层一层的往上找，一直到window结束，这个过程叫做冒泡；

事件流：

	触发某个元素的绑定事件，既有捕获过程又有冒泡过程；（事件模型）；

      作用：
	
	目标元素触发事件，在捕获和冒泡过程中，如果祖先节点拥有与目标元素相同的事件，那么在寻找的过程中会被触发；



传统事件绑定只有冒泡过程；

低版本的IE浏览器只有冒泡过程；


事件对象
	当某个元素绑定事件函数时，浏览器会自动传一个参数过来，这个参数是一个对象，这个对象我们称为事件对象，event对象；在谷歌火狐会把event当成参数传过来；

	cancelBubble：（是event对象里面的一个属性）不是标准，所有浏览器都兼容； //div.onclick=function(ev){}  //ev就是代表了event对象；

		阻止冒泡行为，true表示阻止，false表示允许（默认值）；


	stopPropagation:是标准，但是不兼容

		阻止冒泡行为，低版本IE不兼容	


	//var num = arguments[0]; //实参的集合第一个；代表了event对象；

	//num["cancelBubble"] = true/false;




IE的事件对象：
		
	window.event;(在火狐里面没有)

	如果在火狐只写event会报错；写window.event只是underfine；


	
事件源（也叫‘事件监听“也叫”事件委托“ ）：

	ev.target：触发这个事件的源头，是一个元素；

			事件监听，只能监听自身和自身范围内的元素；

	当某个元素绑定一个事件时，会创建一个event对象；

	当我们触发事件时，这个event对象会记录一些详细的东西；


pageX：获取鼠标的光标在可视区的x轴的坐标；//ev.pageX;

pageY：获取鼠标的光标在可视区的y轴的坐标；//ev.pageY;

	只能获取不能设置；







<-----------------------------------------------12月-22日-------------------------------------------------------------------->

keyCode:键位；

	//ev.keyCode记录,所按下该按键的编号值；

	只能记录一个值，如果多个值一起按下，记录的是键位值最大的那个键；

键盘卡顿是为了提升用户体验；卡顿的时间差在400ms左右；解决办法：放在一个间隔定时器里面，按键抬起时候关闭定时器；


特殊键：
	ctrlkey   ：  ctrl键
	
	shiftkey  :   shift键

	altkey    ：  alt键

	有两个值：true / false
	特殊键不按，值为false，当按下时变成true；


浏览器的默认行为：
	前端开发人员没有写的程序，但是某些情况下，会莫名奇妙的出现；

	消除浏览器的默认行为：
		
		1.在传统事件里面：直接写 return false；

		2.现代事件绑定：ev.preventDefault();


鼠标右击事件：
	oncontextmenu;




<-----------------------------------------------12月-23日-------------------------------------------------------------------->


拖拽：

	原理：
		1.onmousedown；  鼠标键按下
		2.onmousemove;	 鼠标移动
		3.onmouseup;	鼠标抬起；


	问题：鼠标移动速度过快，超出了div，鼠标移动事件失效；

	解决方案：把onmousemove 和 onmouseup 挂在document下面；



<-----------------------------------------------12月-26日-------------------------------------------------------------------->

onmousewheel:
		滚轮事件；  //只在IE跟chorme起作用，火狐没有这个事件；


DOMMousescroll：火狐的滚轮事件；只能用在现代事件绑定；


ev.wheelDelta : 记录滚轮滚动的方向；（IE和谷歌）

		负数：方向向下

		正数：方向向上


ev.detail:记录滚轮滚动的方向；（火狐）

		负数：方向向上；

		正数：方向向下；																																																						



<-----------------------------------------------12月-27日-------------------------------------------------------------------->


正则的语法/规则：
		
a.	var arr = [];
	
	var arr = new Array(); //创建数组

b.	var obj = {}
	
	var obj = new Object();//创建对象



c.	var obj = new RegExp（"字符串"）； //创建正则；

	var obj = //


测试：
	test（）；
		turn：在字符串里面能够匹配到正则里的东西，就返回true；
		false：在字符串里面不能够匹配到正则里的东西，就返回false；
		

		例如：
			//var str = "dafgfaga";
			//var pt = /g/;
			//var b = pt.test(str);  通过测试，该字符“g”在字符串里有没有，返回true，没有false；



\:转义字符；//var pt = /\g//;




search： 
	字符串里与正则的内容是否匹配，如果有，返回匹配的位置（首次出现的位置），没有就返回-1；

		例如：var str = "dafgfaga";
		      var a = str.search(/f/);


match:
	字符串里与正则的内容是否匹配，如果匹配，把匹配的内容放到一个数组；返回值是一个数组；


g： 全局匹配，位置放在正则外边；

	例如： var str = "dafgfaga";

	       var a = str.match(/f/g);

d： 代表0~9的数字；加转义，\d;

D: 不是数字；加转义，\D;

+： 量词，有几个，至少一个最多无限；"可以称为 贪婪模式"

	例如： var str = "fgag3456fsgs34r"

	       var ss = str.match(/\d+/g);


replace: 替换；

	在字符串里找到正则里匹配的字符，用其他的对象把找到的字符替换；

	用法1：str.replace(/正则/,替换的字符)

		例如：var str = aaa445ggggaa；

	     	var a = (/a/g,"A");		

	用法2：str.replace(/正则/,function($0){ })      		//$0代表每次匹配到的那个字符；函数的返回值：是替换的内容，
			
		例如：var str = aaa445ggggaa；			//如果没有return内容，结果就是underfine；  

		      var a = (/a/g,function($0){ return "A"});
	


	返回值：代替后新的字符串；



<-----------------------------------------------12月-28日-------------------------------------------------------------------->


i: 忽略大小写；

	例如：var str = aAAaa445ggggaa；

	      var a = (/a/gi,"A");  //i跟g的位置不区分，位置都是放在正则外边；


(): 子项；提权；  //形参与正则的每个括号一一对应，从左往右；除了$0代表全部


[]: 在括号里选一个数；
	a-z : [a-z]

	A-Z： [A-Z]

	0-9: [0-9]

	[0-9a-zA-Z]
	
	/d : [0-9] //这些范围内取一个；

| ：或   //[a-z|A-Z|0-9]


	

ASCII : 编码；[\u4e00 - \u9fa5]; 所有的中文范围的编码；


\w: 数字 字母 下划线

\W: 非数字 字母 下划线


[^]: 排除 [ ] 的数； // str.match(/[^\w]+/)


^  : 用在开头，以什么开头； // str.match(^/[^\w]+/)

$  :字符串以什么结尾；

.  :代表所有东西，任意东西；  \. 代表纯粹的.

*  ：任意多个，类似 + ；

{n，m } ： 区间，个数范围，   //{5,10} 5到10位；  //{1,}最少一个最多无限；

\s : 表示的是空格符号；

\S : 表示的是非空格键； 

？ ：最多1个，最少没有0个；  //懒惰模式




<-----------------------------------------------12月-29日 1月3日-------------------------------------------------------------------->


面向对象：
	oo,oop,ooa,ood,
	就是一种编程思想；

	面向对象的核心：象；

		抽象，抽离；
		
		把很多功能相同的代码块，抽离出来，封装成一个函数

		换一种编程思想，把相同的东西或者相关的内容(要更新，要维护，要扩展)抽离出来，把不同的功能挂在某个对象下面；

		把函数挂在指定的对象下，

	使用者：只需会会使用函数或者面向对象就行；

	开发者：只需要想怎样写面象对象即可；

javascript对象：
	
	数组，元素，对象，window； 只有对象才有this；

	1.在函数调用里

	2.在事件

	3.在定时器里

	4.在构造函数里，this指的就是构造函数本身；

面向对象的特点：

	抽离

	封装

	继承（多态 ）

	
	

在js的面向对象里：

	抽象

	继承

	多态

new：一元运算符 ，专门运算函数；                  //function Fn(){ };  把函数变成对象；

	new Object()				//var a = new Fn();
	new Array()			
	new RegExp()
	new Date();


使用new关键字，把函数实例化；

new 发生的变化：
	1.偷偷的加上，var obj {},不是自己加的；
	2.把属性和方法挂在this上；
	3.偷偷的加上return obj；
	4.改变this的指向；





面向对象的好处：
	
		1：代码块的结构层次更清晰；

		2：更容易复用；

		3：更容易维护；

		4：更容易扩展

		5：more......


属性：
	var arr = [];
	arr.abc = 123;
	属性前面带有一个对象名字；

变量：
	var a = " ";
	前面什么东西没有，默认window，window省略；

函数：
	function fn（）{ }

方法：
	方法也是函数

	函数前面有主，有对象名，就叫方法；  //例如：arr.push();arr.pop();.......


怎么创建一个属性和方法：

1.创建一个对象
	
	属性：var obj = new Object();

	      obj.name = "小明"

	方法：obj.run = function(a,b){
		var c = a+b;
		return c ;
	      }
		
		obj.run(); //执行；


	缺点：代码过于繁多；


2.工厂模式：

		工厂模式解决了创建类似对象，要产生大量代码的问题；
		
		问题：会引起this的指向混乱；



		例如：
			function person(name){
		
				var obj = new Object(); //原料

				obj.name = name;	//生产
				obj.showName = function(){   //生产
					alert(1);

				}
				return obj;             //出厂

			}

	
3.使用new关键字，把函数实例化；

	new 发生的变化：
		1.偷偷的加上，var obj {},不是自己加的；（偷偷的new一个对象出来）
		2.把属性和方法挂在this上；
		3.偷偷的加上return obj；不用我们加；（偷偷的把构造函数 return 出来）
		4.改变this的指向；

	 例如：function Fn(name){    		//构造函数，构造实例；
		this.name = name;		//构造属性，
		this.run = function(){		//构造方法，
		
		}

		console.log(this)

		
	      };

		var a =new Fn("111")  		 //a就是对象；
		var a1 =new Fn(""222")



prototype:原型；
	它是一个对象，每一个结构函数都有一个原型；（函数一声明，系统自动就会有；函数的一个属性，）

__proto__:属性 原型链；是一个指针，指的就是原型；（对象一声明，系统自动生成一个_proto_）


	 例如：function fn(name){
		this.name = name;
		this.run = function(){
			
			alert(1)
		}
	      };
		var t1 = new fn();
	fn.prototype.name = "sss"         //原型属性
	fn.prototype.run = function(){   //原型方法
			alert(2)
	}
	
	t1.run（）//执行run；
	t1._proto_.run() //也是执行run；

	fn.prototype == t1._proto_;
	
原型的好处：
	1.共享，共享方法和属性；改变，改变原型里面的方法和属性值；（原型是可以共用的）  



把函数变成面向对象步骤：
	
	1.拆函数
	2.把变量放到一个函数里面
	3.把变量变成属性，把函数变成方法；
	4.修正this的指向；



<-----------------------------------------------1月4日-------------------------------------------------------------------->

包装对象：
	在基本数据类型（string，number，boolean）	在调用相对应方法或者属性的时候，系统自动的转化成对象，是一个隐式的转换；
	被转换出来的对象就是包装对象；

包装对象的特点：

	当调用方法或则属性时，系统自动转换对象，
	当调用结束，包装对象立马被销毁；


in： 判断某个对象是否有这个属性,如果这个对象里面没有这个属性它会顺着原型链找，一直到结束；  //a in window

hasOwnProperty():判断属性是否属于某个对象，不会顺着原型链往下找；

	用法：对象.hasOwnProperty("属性") ；

	返回值：true/false
	
constructor : 指出原型的构造函数是谁；是一个属性；

	在原型prototype = {}，constructor属性会消失；
	
	这时候我们要人为的在{}添加constructor，并且等于这个原型的构造函数；

instanceof：检测是否是某个类型原型链上的东西	        // 例如： obj instanceof Object;arr instanceof Array

	返回值：turn/false

	函数是特殊的对象；只是没有对象的属性和方法；




<-----------------------------------------------1月5日-------------------------------------------------------------------->

继承：
	赋值：把一个值赋给一个变量；

	赋址：只有对象，把一个对象赋值给另外一个对象的时候，它赋的不是值，而是一个地址，导致两个对象共享一个对象。



	属性继承：如果子类要继承父类的属性，通过call或者apply改变父类的this指向，（面向属性）

		  指向父类函数的时候给子级添加属性；

		用for in循环父类里面的所有属性，把父类的属性添加给子类；（普通对象）
		

	方法继承：是通过for in 循环遍历整个原型对象，把父类原型里面的方法一一添加给子类的的原型；
			
		  hasOwnProperty（attr） 来限制继承只能继承原型里面的方法，不继承祖先的方法；


		A.拷贝继承：属性和方法都继承了；

			类：class 用于属性和方法的函数就这类；

		B.类似继承：
			1.先创建一个中间变量函数；

			2.让中间变量的函数的原型 = 父类的原型；

			3.把中间变量函数实例化；
	
			4.把实例赋值给子类；

			5.把子类的原型里的constructor改变，改变成指向子类；

			子类只跟中间变量函数的实例有关，中间变量函数的原型跟父类原型有关；
			这样子类与父类的原型没有关系；





<-----------------------------------------------1月6日-------------------------------------------------------------------->


	C.对象继承：

		1.用for in循环父类里面的所有属性，把父类的属性添加给子类；（普通对象）



		2.（1）创建一个函数；
	  	  （2）把obj对象赋给函数的原型；
	 	  （3）把函数实例化；
	 	  （4）把实例赋给obj2对象；



深度克隆：
	






<-----------------------------------------------1月7日-------------------------------------------------------------------->

jquery：
	js原生和一些函数，语法，组合在一起，写的面向对象的库（工具库）；
	
	JQ宗旨：用更少的代码，写出更好的效果；

	有两个版本：
		1.0兼容低版本的IE6-8；（1.70 - 1.73）
	
		2.0不兼容IE低版本；

Sizzle:
		
	



<-----------------------------------------------1月9日-------------------------------------------------------------------->	

try catch();

	例如：
		try{

		    fn（）；       //当try里面有报错的代码，则执行catch里面的代码；没有报错的话则就执行；

		}catch（e）{   // e  是报错的源头；     

		   alert（1）；

		   console.log(e)  //查看报错的源头；

		}



window.onload: 整个页面都加载完，才执行；//引进jquery之后可以这样写： $(function(){    alert(1)  })或者$(document).ready(function(){   alert(1)  })

DOMContentLoaded：当DOM结构加载完后执行；

	只在高版本的浏览器起作用；
	
	IE专属doscroll；（在ie浏览器中，没有加载完DOM结构执行doscroll事件的话，会报错）；

			document.documentElement.doScroll;
		



<-----------------------------------------------1月10日-------------------------------------------------------------------->


jq选择器：
	$("#id");

	$(".class");

	$("li");

	$("#list .lis span") 与css的选择器写法一样；精确查找； //var span = $('#ul .liss span');

	$（"li:odd"） 获取的是偶数行元素；

	$("li:even") 获取的是奇数行元素；

	$("div[attr = value]")选中指定属性和指定值的元素；

	$("div[attr*=value]")选中只要有value的值都会被选中；

	$("div[attr^=value]")选中以value值开头的元素；

	$("div[attr$=value]")选中以value值结尾的元素；

设置样式：
	css（参数1，参数2）；参数1 就是样式；参数2 就是参数值； 可以连缀写；  //span.css('color','red').css('border','1px solid #333');

	 写法：
		1.可以连缀；
	
		2.可以写在一个对象里{
		
			display："block",
			width:100		(没有单位)

			}

		3.混合写法；连缀+对象



原生转jq对象：
	$(原生对象)；				//$(box)

jq对象转原生对象：
	1.通过下标；				//var box = $("#box")[0];     //0代表下标

	2.get()把jq对象转为原生对象； 		//var box = $("box").get(0);  //0代表下标


size（）；获取元素的个数：				//var box = $("box").size();  //与原生对象的length 相仿；
	

click（）；点击事件；     //box.click(function(){alert(1)});

attr();
	获取元素的属性值；第一个参数是属性；第二个参数就是设置的属性值；（如果只有一个参数，那就是获取属性值，如果有两个参数，那就是设置属性值）；


val();
	获取value值，一般用于表单；  //当括号里面没有参数时，表示获取value值，有参数时，表示设置value值；


addClass(); //给元素添加class值；不会覆盖； //$("div").addClass(active);

removeClass(); //删除元素的class值；其他值不变，只删除指定的值； //$("div").removeClass(active);

toggleClass（）；//切换class值，没有就添加，有就删除；

html(); 获取元素里面的所有内容；当括号里面没有参数，就是获取内容；当有参数时，就是设置内容； //console.log($("h2").html("aaa"));

hide();让元素隐藏；参数1：可以设置隐藏时间；ms；参数2：就是回调函数； （参数可写可不写）；


show（）；让隐藏元素显示；参数1：可以设置显示时间；ms；参数2：就是回调函数； （参数可写可不写）；

toggle（）；隐藏和显示切换；




	


<-----------------------------------------------1月11日-------------------------------------------------------------------->

index();给选中的元素自动排序,获取选中元素的下标；  //$("input").index();

	1,没有参数的时候，把所有的兄弟节点都一起排序；
	
	2，传参数，只排参数；

eq（）；从一堆jq对象里面选出一个jq对象； 参数是 下标；//$("input").eq(1).hide();

fadeIn();显示元素，参数1:设置时间； 参数2：回调函数；

fadeOut();隐藏元素，先透明度变小，为0时，元素none；参数1:设置时间； 参数2：回调函数；

fadeToggle（）；隐藏和显示切换；

prev（）；某元素的上一个兄弟节点；

next（）；某元素的下一个兄弟节点；

last（）；相当于eq（length-1）；

first（）；相当于eq（0）；

prevAll（）；获取某元素的所有上一个兄弟节点；

nextALL（）；获取某元素的所有下一个兄弟节点；

siblings（）；除开自己以外的所有的兄弟节点；
	
	参数：筛选元素（只能写标签）



slice（开始位置，结束位置）截取选中的元素的选定个数，包括开始位置，不包括结束；


children（）；获取某元素下的所有子节点；
	参数：要筛选元素，（标签，可以多个，逗号隔开）//$("body").children("div,span,p")

find（）；找到某元素下的后代节点，节点通过参数来找；元素可以是多个，逗号隔开；//$("body").find("div,span,p")

parent（）；找到某元素的父节点，唯一一个；

parents（）；获取某元素的所有祖先节点；

	参数：（标签）找到该标签名的祖先节点，可以多个；

$("<标签名>")；创建元素；

		//$("<div>"),$("<p>");

append();与appendChild一样，在父级里面插入一个子元素，子元素插在最后；

	//$("body").append($("<div>"));

prepend（）；在父级的子元素里面插入一个子元素，只能插在最前面；

	//$("body").prepend($("<div>"));

after();在某个元素后面插入一个元素；



before（）；在某个元素前面插入一个元素；

remove（）；删除某个元素； //$("div").remove();

clone（）;克隆元素；
	
	目标元素.clone（）；  //参数： true/false；  true：克隆事件（jq里面的事件）；false：事件不克隆，默认值；





each（function(i,ele){  }）；
	
	return  相当于continue；  //跳出本次循环；

	return false 相当于break；  //跳出整个循环；





<---------------------------------------------1月12日--------------------------------------------->

wrap（）；给每个选中的元素都添加一个父级，每个都有；  //$('span').wrap('<div>');
	
wrapAll();给选中的一组元素加同一个父级；//$('span').wrapAll('<p style="background: yellowgreen;"></p>')

unwrap();把元素的父级去掉；body去不掉的；祖先级去不掉，//$("span").unwrap();

wrapInner（）；给选中的元素添加一个子元素；//$("#div").wrapInner("<p></p>")


BOM部分：

	在BOM里面jq有一个特性：
	
		方法不传参数，一般都是获取值，传参数就是设置；


height（）；获取元素的高度；传参数，就是设置高度；//var h = $(".div").height(); 参数没有单位；

width（）；获取元素的宽度；传参数，就是设置宽度；//var h = $(".div").width();


innerWidth（）；获取元素的宽度，相当于clientWidth； + padding；（不包括边框）

innerHeight（）；获取元素的高，相当于clientHeight； + padding；（不包括边框）


outerWidth();获取元素的宽度，相当于offsetWidth； +padding+ border；

outerHeight();获取元素的高度，相当于offsetHeight； +padding+ border； 

	参数：传true，表示可以把margin值给计算出来；



scrollTop（）；获取滚动条的高度；参数：设置；//var box = $(window).scrollTop();

scrollLeft（）；获取滚动条到最左边的距离；参数：设置；//var box = $(window).scrollLeft();


offset().top/left :距离页面的，获取的是页面的距离；


position().top/left : 获得的相对定位父级的距离；

offsetParent（）； 获取定位父级的元素；

animate（）；延迟加载；
	
	//$(".div").animate({
		opacity:0,
		height:200,
		top:100

	},200)



<---------------------------------------------1月13日--------------------------------------------->

事件：

click（）；

	on("事件名"，函数)   //$('div').on("click",function(){
					alert(1)
				})

	
      //当多个元素执行同一套代码时，可以把事件挂在document下，在on里面放参数，参数是拥有相同代码的元素，每个元素以逗号隔开；

	多个元素共同事件的写法：
	
		//$(document).on("click","#div1 ，div2",function(){

				alert(1);


		})

      //同一个元素拥有多个事件，且执行代码一样，事件可以合在一起写，事件与事件之间以空格隔开；
 
	同一个元素不同事件执行相同的代码：

		//$("div").on("mouseenter mouseleave",function(){
				alert(1)
		})


return false; 阻止冒泡和浏览器的默认行为；

stopPropagetion(); 阻止冒泡；

off（）；

	解除绑定事件
		//$("div").off("click");

		可以给事件加class名称，在解绑的时候可以根据class名具体到要解绑哪个事件；

		//$('div').on("click.123",function(){
			alert(1)
			$("div").off("click.123");
			
		})
	


当父级事件包裹子级事件时，触发父级事件，再触发子级事件，子级会执行多次；	

解决：
	在子级的事件前先解除绑定.off()再添加事件；
	$("#div").on("click",function(){
		alert(1)
		$("#div2").off().on("click",function(){

			alert(2)
			return false;

		})

	})




<---------------------------------------------2月04日--------------------------------------------->

ev.originalEvent: 把jq的事件对象转化原生的事件对象；//$('div').on("click",function(ev){
							var a = ev.originalEvent;
						     })


jq里面ev对象的属性：

	ev.pageX: 鼠标在document上的x轴；
	ev.pageY: 鼠标在document上的y轴；

	ev.clientX:鼠标在document上的x轴；
	ev.clientY:鼠标在document上的y轴；

	ev.which:获取键值；
	ev.target:事件源，事件触发的源头，是一个元素；






<---------------------------------------------2月06日--------------------------------------------->

delegate()：事件委托；(父级把事件委托给后代)；
	
	写法：父级.delegate（"后代元素","不带on的事件",function(){  }）

	//$("ul").delegate("li","click",function(){   alert(111)   })


undelegate();解除事件委托；

	写法：父级.undelegate();

	//$("ul").undelegate();


dataset; 在行间添加属性，可看的自定义属性；（HTML5新属性）；

	//设置值：元素.detaset.zdy(自定义属性的名称) = 属性值；

	//获取值：元素.detaset.zdy;


ev.delegateTarget : 找到事件委托的源头，是一个元素；


ev.which;记录键盘键位；

trigger();触发器；

	用法：元素（有事件的元素）.trigger("事件名/事件名.class");


工具方法：

each：
	用法一：$.each(arr(数组)，function(i,ele){   });(工具用法)

	用法二：$("li").each（function（i,ele）{  }）;
	
isNumeric();检测是否是number数据类型；返回结果是true/false
	//var num = 12;
	//var a = $.isNumeric(num); 

isArray（）；检测是否是数组；

isWindow();检测是否是window对象；

isPlainObject();检测是否是{}对象；

$.type();检测各种数据类型；

$.proxy(参数1，参数2，参数3，参数4……);改变this指向； //$.proxy(fn,obj，1,2,3)
	
	参数1：要改变this指向的函数；
	
	参数2：this指向谁
	
	从第三个参数开始，就是fn函数的实参；

	返回值：改变this指向后的函数；

$.extend(参数1，参数2，参数3);克隆对象；

	参数1：true/false； true深度克隆；
	
	参数2：obj2（赋值的目标）

	参数3：obj（克隆的目标）


运动：
	
slideUp();隐藏

slideDown();显示

slideToggle();隐藏/显示切换；




<---------------------------------------------2月07日--------------------------------------------->

animate();运动方法；

	必传参数{
	
		left：
		top：
	
	}

用法：
	1.  animate（{top:300 }）；

	2.  animate（{top:300 },500）

	3.  animate({top300 },500,"swing/linear")

	4.  animate({top:300 },{ duration:设置时间，easing:"linear/swing"})

	5.  animate({top:300 },500,"swing/linear",function(){ }) //回调函数；

	6.  animate({top:300 },{ duration:设置时间，easing:"linear/swing",complete:function(){  }})//回调函数；

	7.  animate({top:300 },{ duration:设置时间，easing:"linear/swing",complete:function(){ },step:function(now,fx){ }})//同步函数；

		now： 当前正在改变属性的 属性值；

		fx： 内容变化信息；


运动速度：
	1.默认是两边慢中间快；swing；
	2.匀速linear；


stop();停止运动；jq运动之前都先stop();

delay();运动延迟，只能给运动加；
	
	参数：时间；


+=；在原来的基础上增加；只能用在字符串；字符串要加单位px；

	//$(".div").stop().annimate({top:"+=200px",height:"+=300px" },500)


同步动画：
	在animate({})的必传参数里面所有的样式都是一起变化，同步动画；


列队动画：
	元素样式变化不是同一时间变化，而是按顺序执行，

	写法1：在animate的回调函数里面再执行animate；

	写法2：连缀写法，是同一个元素才可以；//$("div").stop().animate({ },100).animate({ },100);


	列队动画中，使用stop()的时候，没有传参数的话，只能停止当前运动这一个，传入参数true，全部都停止；




<---------------------------------------------2月08日--------------------------------------------->



ajax：
	Asynchronous Javascript And XML

	是前台和后台进行数据交换的技术

	ajax获取的数据在没有做处理的情况下，是一个字符串（有一些数据长得像json）；

	

	ajax学习：
		
		1.ajax实现的原理；

		2.获取数据后一些逻辑业务处理（需求）；

	ajax的优点：
		
		不需要刷新页面，也不用跳转页面；做到实时更新；提升用户体验；


	打电话流程：
		1.找到一个手机	（创建一个ajax对象：var ajax = new XMLHttpRequest()；//IE6 之后的   ）

		2.输入号码	(ajax.open()    )参数：（传送方式，文件地址url，是否异步）获取数据url里面就不用加数据，上传数据就加数据；

		3.拨号		(ajax.send()    )

		4.等候		(ajax.onload = function(){ }    )

		5.接通		(ajax.onload = function(){ ajax.responseText   }    )

				//ajax.onreadystatechange = function(){ajax.responseText}  兼容IE6,7,9
	
	

<---------------------------------------------2月09日--------------------------------------------->


创建ajax对象：
	var ajax = new ActiveXobject（）；//IE5
 	
	var ajax = new XMLHttpRequest()；//IE6 之后的



ajax的传输：
	1.get：a)数据的传输是放在url里面的；   
								//ajax.open("get","php/get.php?user=" + val, ture)	
	       b)传输的数据有长度限制；（每个浏览器的限制都不同）；

	       c)不安全，数据会缓存在浏览器；// 


	2.post：a)数据不是放在url里面，而是放在send（），里面；    //ajax.open('post','php/get_info.php',true);

								//ajax.setRequestHeader( 'Content-Type','application/x-www-form-urlencoded');请求头
		b)在send（），加一个请求头
							       //ajax.send('user='+val);
		c)数据不会被缓存在浏览器，相对get安全；
	       
		d)理论上传输数据没有长度限制；服务器可以限制；

		e)post的请求头里面有翻译汉字的功能，在IE低版本不用encodeURI();（因为请求头里面有urlencoded）
		

decodeURI( )；转换缓存在浏览器缓存的数据的乱码格式；	//把%E5%91%A8%E6%88%90 转化为 汉字；

encodeURI();  						//把汉字 转化为 %E5%91%A8%E6%88%90；

	为了兼容低版本的IE浏览器，把传送的汉字先用encodeURI 转义；


ajax.readyState;请求服务的状态

	值      状态            说明

	0	未初始化		尚未调用open（）方法

	1	启动		已经调用open（）方法，当尚调用send（）方法

	2	发送		已经调用send（）方法，但尚未接受响应

	3 	接受		已经接受部分响应数据

	4 	完成		已经接受全部响应数据，可以使用；

ajax.status;服务器的状态码（200、404、……）




一般判断服务的状态是否完成，才执行ajax的返回信息；

	if（ajax.readyState == 4）{		//说明ajax的流程完成

		if(ajax.status >= 200 && ajax.status<=207){		//说明请求成功了
			再执行；
			ajax.responseText;//获取的数据是普通字符串数据类型；
			ajax.responseXML;//获取的数据是自定义标签内容；
		
		}else{

		
		
		}
	}





onreadystatechange；readystate值改变触发事件； 不标准，但是兼容所有浏览器；

onload 标准，但不兼容IE9以下的浏览器



请求是否异步：
	true ： 异步请求 // 非阻塞模式

	false ： 同步请求 // 阻塞模式	

<---------------------------------------------2月10日--------------------------------------------->

把json转化对象：
	
	1.JSON.parse(a);只能转化标准写法的json；
	
	2.eval();
		a).比较耗性能；
		b).不安全，容易携带病毒；
	

		//var obj = eval("("+a+")");

	3.new Function("","return"+数据); 然后自执行；

		//var obj = (new Function("","return"+json))();



<---------------------------------------------2月13日--------------------------------------------->
jq的ajax

$.parseJSON():把json转化成对象，只能转化标准格式；

$.parseHTML();把字符变成dom元素；//var a = $.parseHTML("<br/>")

$.parseXML();把长得像xml格式的字符串变成XML；

$.get(url+data,function(){ });get方式的传输方法；

$.post(url,date,function(){ })post方式的传输方法；

$.ajax({

	url: 地址，
	dateType：数据类型，
	type："post"/"get",(不写默认为get)
	asyns:是否异步，
	success：functin(){}成功执行的函数，
	error：function(){}失败执行的函数，
	data：数据
});








<---------------------------------------------2月17日--------------------------------------------->

上传文件：
	***//   form 表单只能用post传输方式；	

	在input type = file，inpu有一个files的对象，files[0],里面有上传的文件的信息；

	把文件转换成二进制

		var formDate = new FormDate( );

		formDate.append(key,value)

		   key:由后台定；

		   value:input.files[0];

	最后把formDate通过send();传输；

	send（fromDate);

	只能用post传输，而且不需要请求头；



<---------------------------------------------2月18日  2月20日--------------------------------------------->


上传：

	upload.onprogreess 检测文件上传的事件，是每隔一段时间检测一次
					


	//ajax.upload.onprogress = function(ev){   }


					//ev.loaded :当前传了多少；
					//ev.total  :总大小；




下载：
	//ajax.onprogress = function(ev){   }


					//ev.loaded :文件当前下载了多少；
					//ev.total  :文件的总大小；
	
	



***跨域***：

	同源策略：是一种约定，是基于网络安全，web就是构建在同源策略的基础之上的；

	同源：同域名，同端口，同协议；

	      访问||获取数据||链接某个接口，只要任意一个条件不满足，就叫跨域；

	      只要任意一个要求不满足，就不能正常的使用，不能正常使用被称为跨域；

	      域名：小名叫 IP;
				**  https://www.baidu.com  

	      DNS服务器:把域名通过dns服务器解析，与ip联系在一起；

	      协议：https；http；file..........等



解决跨域方法：
	
	1.XMLHttpRequest申请权限；在“Access-Control-Allow-Origin”里面有自己的域名；

	2.服务器代理：php请求资源不涉及跨域；然后再请求服务器。服务器起到中转作用；

	3.flash

	4.iframe		//<iframe src="httpt://www.baidu.com"></iframe>     *HTML5新标签属性* 在一个页面嵌入另一个页面；


	5.jsonp : SJON with Padding

		a)  script标签；

	
	原理：	(1)动态的加载一个script标签；设置src，通过地址加载数据；
		(2)先写一个全局函数；函数名与后台传过来的数据里面的函数名字要一样；
	           我们定义的全局函数里面有一个形参，形参和后台传输的实参一一对应；
		(3)

<---------------------------------------------2月21日--------------------------------------------->


		为什么用jsonp？？  因为跨域了；

		1.动态生成script标签，设置src，通过地址加载数据 （link a img script ifarme 等  都是通过src获取 数据）

		2.通过参数，把回调函数的函数名称传到后台，让后台把函数返回 回来；

		3.定义一个全局函数，函数名称就是传到后台的函数的名字，全局函数里面的形参就是后台给我们的数据，
		  操作形参就相当于操作后台返回来的数据；



cookie:
	指某些网站为了辨别用户身份，进行的session跟踪而储存在我们的终端；***（Session是指从打开某个网站到关闭之间经过的时间；）

	的数据（通常这些数据都是加密的）；

	chrome 在服务器环境里面才能使用cookie

	其他大多数浏览器都可以在本地使用；

	cookie的数据是放在本地的磁盘里面的；


cookie的设置：

	数据是以 名值对 保存的 ;一个名对应一个值；

	key:value

	document.cookie = " name =  value";    // document.cookie = "key =  今天天气真好";

	当name值同样的时候。下面的值会把上面的值 覆盖；// document.cookie = "key =  今天天气真糟糕"; **这个会把上面那个覆盖；


覆盖：
	当name值相同时，后面的value会把前面的value值覆盖；




 
cookie的生命周期：
	
	默认值：浏览器一关闭，cookie就被删除；

cookie不共享；

cookie的获取:（服务器环境里面才能使用）
	// var box = document.cookie; console.log(box);


cookie的容量：
	一条最多存4k，不能超过20条；


删除：
	cookie删除不了，只能让设置的时间过期；




设置生命周期：
	
	document.cookie = " name =  value;expires = time";




function setCookie(name,value,time){
		var nowDate = new Date();
		time = time || "Session";
		nowDate.setDate(nowDate.getDate()+time);
		document.cookie = name+'='+value+';expires='+nowDate;
		return document.cookie.split('; ');
	}





<---------------------------------------------2月22日--------------------------------------------->
	
localStorage：
	本地储存，非IE浏览器，在本地就可以进行储存；

设置：	window.locaStorage.setItem(key,value);

	当key值相同的时候，后面的value值会把前面的value值覆盖；


  
获取：var ss = window.localStorage是一个对象，包含所有储存的内容；   ****(全部)

      var s =  window.localStorage.getItem(key)   **********************（单个）

生命周期：
	只要设置了值，那么值永远存在；（没有手动删除的情况下）


数据存量：5M ；


删除：
	window.localStorage.removeItem(key);(删除某个数据)

	window.localStorage.clear();（删除所有数据）
	
	

共享性：
	同一款浏览器，而且兄弟页面之间，数据共享；

      //兄弟页面之间可以进行共享；



storage ： 事件，当localStorage里面的值发生（删除/增加/替换），就会触发这个事件；给兄弟页面使用的；

	window.onstorage = function(ev){  }；			// ev 包含了事件的一些信息；





<---------------------------------------------2月23日--------------------------------------------->

sessionStorage:
		区别：1.兄弟页面不共享；
		      2.浏览器关闭，数据会清空；





插件和组件都是为了方便我们复用，让核心代码重复使用;

插件：
	就是一些工具性的方法：$.each(),各种检测，.$ajax()…………


组件：
	功能型的方法：$("box").css({}),$("box").animate({})……
				


插入一个插件：
	借用$.extend()来实现插件的插入；

	用法：


		
		$.extend({
		   ss:function(num){}

		})


		$.ss(222);


插入一个组件：
	
	$.fn.extend({
	  属性：属性名

	})



$.extend(obj,opation,s);

赋值的对象，默认参数，





***********************************************************************


instanceof    //检测是  object 还是 array   类型；



var arrayStr=new Array("1","2","3","4","5"); 
alert(arrayStr instanceof Array); 





<---------------------------------------------2月27日--------------------------------------------->


github:


	git clone http:*****     从github 下载路径；

	git status 		 查看 工作区 和 暂存区 的状态；

	git add 文件名     	 把文件从工作区传到 暂存区；（git add .    上传所有文件）

	git config --global user.name "****"       提交分支的时候  设置用户名

	git config --global user.email "**@qq.com" 提交分支的时候 设置邮箱

	git config --global user.name              查看设置的用户名；

	git commit -m "注释"		           把暂存区 的内容传到 版本库； //git commit -a -m "注释" 快速经过暂存区；
	
	git log                                    查看版本库 状态；

	git diff                                   查看 工作区 和 暂存区 内容 的 变动；

	git diff --cached                          查看 暂存区 和 版本库 内容 的 变动；

	git diff master			           查看 工作区 和 版本库 内容 的 变动；

	git reset HEAD 文件名			   从 暂存区 撤回到 工作区；

	git checkout 文件名			   把 工作区 的版本还原到 暂存区 的版本；
 
	git commit -m "注释" --amend

	git push origin master                  把版本库里面的版本 提交到 远程仓库；

	
	

	

<---------------------------------------------2月28日--------------------------------------------->

	git reset --hard ID号                     把 版本库 的内容 还原到 工作区；（预防工作区的内容被误删后） 







git clone http:*****     从github 下载路径；

			 
				
git config --global user.email "你提交分支的时候提交记录里显示的用户邮箱" 
	
			
git config --global user.name "提交分支的时候提交记录里显示的用户名"
	
			
git config --global user.name			查看用户名
	
			
				
git status					查看工作区和暂存区的状态


git log			版本库的状态
				
				

git add 文件名	把版本从工作区送到暂存区
	
			

git add .  		把工作区所有文件都放到暂存区
		
		
				
git commit -m 	"注释"	把暂存区 的内容传到 版本库；
				
				

git diff		查看工作区和暂存区内容的变动
				
				

git diff --cached	查看暂存区和版本库内容的变动；
	
			
				
git diff master	查看工作区和版本库内容的变动
				
				

git reset HEAD 文件名	暂存区撤销到工作区
				
				

git checkout 文件名		把工作区的版本还原成暂存区的版本
				
				

git commit -m "注释" --amend	
				
				
git push origin master			将版本库里面的版本提交到远程仓库
	
			
				
git reset --hard id号     			还原整个版本
	
			
				
git remote     					查看远程仓库的名字

				
				
git remote -v  				git	查看远程仓库对应的地址
		
		
				
git remote add 					创建仓库的名字
	
			
				
git fetch						将远程文件拉下来

				
				
git diff master origin/master		查看冲突
			
	
				
git merge  origin/master		将2个文件的不同显示到页面，人为判断选取哪个
解决完之后再进行push
			
	
				
git pull						直接拉取
	
			
				
git branch 						查看分支

				
				
git branch 新分支名 				新分支的名字
	
			
				
git checkout 分支名 				切换分支
	
			
				
git checkout -b 新分支名  		快速新建并切换
				
	
			
git merge 分支名 				合并分支
	
			
				
git branch --merged 			查看当前主干上有多少个分支已经合并
	
			
				
git branch --no-merged 			查看没有合并的分支

				
				
git branch -d 分支名 			合并完分支后删除
	
			
				
git branch -D 分支名 			强制删除没有合并的分支
				
				

解决冲突：
					
   1.将主干和分支都提交到版本库；	
   2.合并（git merge new1）
					
   3.git status (查看冲突)；		git
   4.手动解决；	
   5.删除分支
