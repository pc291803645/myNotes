<********************************************2017-03-01**************************************************>
CSS3 选择器:

	nth-child(n);  获取某元素下的第几个子元素；   // ul li:nth-child(2);    n>0;   奇数项：odd；  偶数项：even （2n）； n 代表全部子项；
	
	nth-of-type(); 找到父级指定的元素；   //div p:nth-of-type(n);


	根据属性找：

		p[index = 1]{  }		//某属性和值

		p[index^ = 1]{  }		//某属性的值以什么开头

		p[index$ = 1]{  }		//某属性的值以什么结尾

		p[index* = 1]{  }		//某属性包括的值；

	伪类：
		
		#border：after{							//在后面添加
			 	content："";//伪元素
				color：red；
				clear：both；
				display：block；
				}

	
		#border：befor{							//在前面添加
			 	content："";//伪元素
				color：red；
				clear：both；
				display：block；
				}




background-size:contain 背景自适应伸缩
		
		cover   背景等比例缩放，覆盖整个容器；

		auto（默认）  图像以本尺寸显示；


background-clip;背景裁剪；

		border-box  让边框区域显示背景

		content-box   只在内容区域显示背景图片

		padding-box   让背景图片显示在padding区域；

background-origin；背景基点设置（图片可以在哪个位置显示出来）

		border-box  从边框区域开始显示   //在元素盒子内部绘制背景

		content-box  从内容区域开始显示   //在内边距盒子内部绘制背景

		padding-box   从padding区域开始显示；  //在内容盒子内部绘制背景



怪异盒模型：
		box-sizing:border-box; //盒子的大小 就是 设置的大小，不会因为padding和 border而改变；只是内容区域大小改变；（把边框的厚度加到宽度）

			   content-box； //宽度为内容宽度；





transition:过度动画；



定义关键帧：

	@keyframes name{
		form{}			//开始
		to{}			//结束

	或者：	0%{}
		10%{}
		20%{}
		……
	}


	animation-name：name            //指定一个关键帧动画名称；执行哪个动画

	animation-duration：1s；        //动画时间；

	animation-iteration-count:      //运动次数；（infinite   无限运动）

	animation-play-state：paused;    //停止动画；

	animation-delay:1s;               //延迟动画时间；

	animation-timing-function:             //运动速度；

				linear  匀速；
				
				ease（默认）先加速，后减速；  

				ease-out 减速；
				
				…………

	
	animation-direction：alternate；    //运动回放；

	animation-fill-mode：both;	//运动结束时的位置；

			     backwards  //原始位置；
				
			     forwards  //目标位置；

			     both      //在哪结束就停在哪个位置；





	合写：
	
		animation：name，运动时间，运动次数，延迟时间，运动速度，运动结束时的位置；




<********************************************2017-03-02**************************************************>


transform:

	rotate（）:旋转；单位 deg 角度，正值顺时针，分之逆时；
		rotateX：
		rotateY：
		rotateZ：

	scale（）缩放；单位 数字；在原来的基础上缩放；	
		scaleX()；
		scaleY()；	

	skew（**deg）斜切；单位 deg 角度，
		skewX();
		skewY();

transform-origin：//top bottm left right  也可以 用像素（px）；
	
	基点设置（默认是圆心center）


transform：

	translate（30px，30px）；位移；X轴 Y轴；
	
	或者：translateX（）
	      translateY（）
	      translateZ ()


transform连写情况下，先执行后面的；谁最后面就最先执行谁；


设置3D环境：

	transform-style:preserve-3d;  设定3D环境；


	perspective：**px；           设置观察距离；才会有3D效果；（景深）




响应式：
	@media    //媒体查询；   @media tv{ };

	all 代表所有设备；

例如：
	@media all and (min-wdth:1200px){  }   //所有设备且分辨率大于或等于1200px 才执行；

	@media all and (max-wdth:1200px){  }   //所有设备且分辨率小于或等于1200px 才执行；


	


<********************************************2017-03-03**************************************************>

bootstrap：


布局容器：


	栅格系统：
		
	容器div的class名：class="container "

			
<div class="container">   //<div class =" container-fluid"> 100%容器；

	<div class =" row">		//相当于tr；
		
		<div class = "col-sm-11"> </div>  //相当于td；

	</div>

</div>


	.col-sm-11: 意思是：小屏幕时，div占11个格子；一共12个格子；

		.col-xs-     超小屏幕 <786px

		    -sm-     小屏幕   >=786px

		    -md-     中屏幕   >=992px
		
		    -lg-     大屏幕   >=1200px

		hidden-xs	满足分辨率 隐藏；



列排序:

	col-md-offset-*       ：           设置列偏移，会影响其他div

	.col-md-push-*       ：          往前推几个，不影响其他div

	.col-md-pull-*        ： 	 往后拉几个，不影响其他div

	


移动端：
	<head>
		<meta name="viewport" content="width=device-width,user-scalable=yes,initial-scale=1,minimum-scale=1,maximum-scale=1" />
	</head>

		


		viewport ：视口

		<!--设置视口大小，根据设备自适应大小 或者 可以手动输入像素px 大小   -->
		<!-- user-scalable = no/yes"  是否允许缩放--> 
		<!-- initial-scale = ?  设置初始状态的大小-->
		<!-- minimum-scale = ?  最小缩小比例-->
		<!-- maximum-scale = ?  最大放大比例-->


	window.devicePixelRatio;    获取设备像素比；


	适配的方案：
		
		1.百分比适配（缺点是高度不好设置，body没高度的话，元素高度也就没有了）

		2.viewport（根据像素比进行缩放，像素还是原来的像素，缺点：图片放大时，会失真）

			做法：<meta name="viewport" content="width=device-width,user-scalable=yes,initial-scale=1,minimum-scale=1,maximum-scale=1" />

				不写死，获取设备可视区宽度，var i = window.innerwidth / 32；

				<meta name="viewport" content="width=device-width,user-scalable=no,initial-scale=i,minimum-scale=i,maximum-scale=i" />



		3.rem （单位）         //font-size:2rem; height:2rem;根据 根元素（root） html的字体像素，设置元素大小依据html字体大小 而设置；

				例如：html的字体大小是100px；设置div宽度300px，则写法：{width：3rem；}


		      em :也是单位；是根据父级字体大小，而不是 根据html；



				例如：window.onresize = function(){
					var iW = window.innerWidth;
					var html = document.getElementsByTagName('html')[0];
					var i = iW/32; 
					html.style.fontSize = i + "px";
					
				      }


			区别：rem： html根节点的一个字节的像素

				em：父级元素一个字节的像素







<********************************************2017-03-06******************************************>

移动端三大事件：
	
	touchstart ： 手指按下，触发事件；

	touchmove：  手指滑动触发事件；

	touchend ： 手指抬起触发事件；
	
			

pc端事件比移动端事件慢大约300ms；


移动端的事件点透：


	在点击时，在同一个区域的上层和下层的元素都会有点击特性，这个特性的事件大约在300ms左右；	

	在使用移动端事件时，移动端事件速度快，执行后，这个点击特性还没消失，那么下层元素也会被这个事件触发；

解决方案：
	1.把浏览器默认行为取消； ev.preventDefault();
		还要实现跳转，就不用a标签了，使用window.open();





	移动端因为有点透现象，所有一般不用a标签跳转页面，可以使用 open（） 打开新页面；



ev事件对象：
	ev.touches  获取屏幕上的手指列表

	ev.targetTouches 在元素上的手指列表

	ev.changedTouches 在元素上触发事件的手指列表




window.orientationchange = function(){  }  //移动端切换 横屏竖屏 触发事件；（或者： onresize 事件）

兼容：window.addEventListener("orientationchange in window?"orientationchange":"resize"",function(){  alert(222) },false);






<******************************************** 2017-03-07 ******************************************>

陀螺仪：
	重力感应；
	
	事件：window.devicemotion;

	ev.accelerationIncludingGravity;（重力加速度）

		有三个值：
			X（左右）

			Y（上下）

			Z（前后）
			
				三个方向加速度的值；