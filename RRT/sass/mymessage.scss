$rem-baseline: 100px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;
@function rem-separator($list, $separator: false) {
    @if $separator=="comma" or $separator=="space" {
        @return append($list, null, $separator);
    }
    @if function-exists("list-separator")==true {
        @return list-separator($list);
    }
    // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
    $test-list: ();
    @each $item in $list {
        $test-list: append($test-list, $item, space);
    }
    @return if($test-list==$list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
    font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
    $result: ();
    $separator: rem-separator($values);
    @each $value in $values {
        @if type-of($value)=="number" and unit($value)=="rem" and $to=="px" {
            $result: append($result, $value / 1rem * $rem-baseline, $separator);
        }
        @else if type-of($value)=="number" and unit($value)=="px" and $to=="rem" {
            $result: append($result, $value / $rem-baseline * 1rem, $separator);
        }
        @else if type-of($value)=="list" {
            $value-separator: rem-separator($value);
            $value: rem-convert($to, $value...);
            $value: rem-separator($value, $value-separator);
            $result: append($result, $value, $separator);
        }
        @else {
            $result: append($result, $value, $separator);
        }
    }
    @return if(length($result)==1, nth($result, 1), $result);
}

@function rem($values...) {
    @if $rem-px-only {
        @return rem-convert(px, $values...);
    }
    @else {
        @return rem-convert(rem, $values...);
    }
}

@mixin rem($properties, $values...) {
    @if type-of($properties)=="map" {
        @each $property in map-keys($properties) {
            @include rem($property, map-get($properties, $property));
        }
    }
    @else {
        @each $property in $properties {
            @if $rem-fallback or $rem-px-only {
                #{$property}: rem-convert(px, $values...);
            }
            @if not $rem-px-only {
                #{$property}: rem-convert(rem, $values...);
            }
        }
    }
}

body{
    background: #ededed;
}
.renrenyouting{
    padding-top: 0.7rem;
    padding-bottom: 1.46rem;
}
.top {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 0.7rem;
    background: #327dfb;
    border-bottom: 1px solid rgba(255, 255, 255, 0.3);
    z-index: 10;
}
.top .back {
    position: absolute;
    left: 0.15rem;
    top: 0;
    width: 0.5rem;
    height: 0.7rem;
}
.top .back-arr {
    display: block;
    width: 0.2rem;
    height: 0.2rem;
    margin: 0.22rem 0 0 0.18rem;
    border: 0.04rem solid #fff;
    border-width: 0.04rem 0 0 0.04rem;
    -webkit-transform: rotate(-45deg);
    -moz-transform: rotate(-45deg);
    transform: rotate(-45deg);
}
.top h2 {
    line-height: 0.7rem;
    font-size: 0.3rem;
    color: #fff;
    text-align: center;
}
.msg-content{
    padding: rem(15px) rem(12px) 0 rem(12px);
}
.msg-item{
    margin-top: rem(12px);
    padding-bottom: rem(22px);
    background: #FFFFFF;
}
.msg-content .msg-item:nth-of-type(1){
    margin-top: 0;
}
.msg-head{
    position: relative;
    margin: 0 auto;
    width: 98%;
    height: rem(70px);
    display: flex;
    display: -webkit-flex;
    align-items: center;
}
.msg-head::before{
    content: "";
    position: absolute;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 1px;
    background: linear-gradient(to right, #dcdcdc, #dcdcdc 15px, transparent 2px, transparent);
    background-size: 17px 100%;
}
.msg-title{
    position: relative;
    margin-left: rem(15px);
    flex: 1;
    font-size: rem(30px);
    color: #333333;
}
.msg-time{
    margin-right: rem(15px);
    font-size: rem(28px);
    color: #999999;
}
.msg-new{
    margin-left: rem(35px);
    position: relative;
}
.msg-new::before{
    content: "";
    position: absolute;
    top: 50%;
    left: rem(-30px);
    width: rem(22px);
    height: rem(22px);
    background: #ff0000;
    border-radius: 50%;
    transform: translateY(-50%);
    -webkit-border-radius: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -o-border-radius: 50%;
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    -o-transform: translateY(-50%);
}
.msg-text{
    padding: rem(15px) rem(30px) 0 rem(30px);
    line-height: rem(45px);
    font-size: rem(28px);
    color: #999999;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
   -webkit-box-orient: vertical;
   -webkit-line-clamp: 2;
}

.watch-msg{
   -webkit-line-clamp: inherit;
}
.msg-foot{
    margin-top: rem(30px);
    padding-right: 0.37rem;
    text-align: right;
    font-size: 0;
    .watch-btn{

    }
    .watch-btn::after{
        content: "";
        display: inline-block;
        vertical-align: -0.3rem;
        border: 0.15rem solid #626262;
        border-color: #626262 transparent transparent transparent; 
    }
}

.bottom{
    margin-top: rem(40px);
    text-align: center;
    font-size: rem(28px);
    color: #999999; 
}
.msg-cont{
    height: rem(100px);
    overflow: hidden;
}
